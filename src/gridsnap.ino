/*
###   ██████╗ ██████╗ ██╗██████╗ ███████╗███╗   ██╗ █████╗ ██████╗ 
###  ██╔════╝ ██╔══██╗██║██╔══██╗██╔════╝████╗  ██║██╔══██╗██╔══██╗
###  ██║  ███╗██████╔╝██║██║  ██║███████╗██╔██╗ ██║███████║██████╔╝
###  ██║   ██║██╔══██╗██║██║  ██║╚════██║██║╚██╗██║██╔══██║██╔═══╝ 
###  ╚██████╔╝██║  ██║██║██████╔╝███████║██║ ╚████║██║  ██║██║     
###   ╚═════╝ ╚═╝  ╚═╝╚═╝╚═════╝ ╚══════╝╚═╝  ╚═══╝╚═╝  ╚═╝╚═╝     
###                                                              
###  Created by KeatonMayhem (C) 2025
###  https://github.com/KeatonMayhem
###  version 1.0
*/

#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <SoftwareSerial.h>
#include <UTMConversion.h>
#include <TinyGPSPlus.h>
#include <avr/pgmspace.h>

#define SCREEN_I2C_ADDR 0x3C
#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64
#define OLED_RST_PIN -1

const int RXPin = D7;
const int TXPin = D6;

// Boot Logo
const unsigned char gridSnapLogo [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x0f, 0xff, 0x07, 0x7f, 0x07, 0x1f, 0x5c, 0x15, 0xff, 0x9f, 0x80, 0x78, 0x7f, 0xe0, 0xff, 0xe0, 
	0x0f, 0xff, 0x07, 0x7f, 0x07, 0x1f, 0x5c, 0x15, 0xff, 0x9f, 0x80, 0x78, 0x7f, 0xe0, 0xff, 0xe0, 
	0x0f, 0xff, 0x07, 0x7f, 0x07, 0x1f, 0x5c, 0x15, 0xff, 0x9f, 0x80, 0x78, 0x7f, 0xe0, 0xff, 0xe0, 
	0x0f, 0xff, 0x07, 0x7f, 0x07, 0x1f, 0x5c, 0x15, 0xff, 0x9f, 0x80, 0x78, 0x7f, 0xe0, 0xff, 0xe0, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x3c, 0x00, 0x07, 0x01, 0xc7, 0x1c, 0x07, 0x14, 0x00, 0x1f, 0xe0, 0x79, 0xe0, 0x38, 0xe0, 0x38, 
	0x3c, 0x00, 0x07, 0x01, 0xc7, 0x1c, 0x07, 0x14, 0x00, 0x1f, 0xe0, 0x79, 0xe0, 0x38, 0xe0, 0x38, 
	0x3c, 0x00, 0x07, 0x01, 0xc7, 0x1c, 0x07, 0x14, 0x00, 0x1f, 0xe0, 0x79, 0xe0, 0x38, 0xe0, 0x38, 
	0x3c, 0x00, 0x07, 0x01, 0xc7, 0x1c, 0x07, 0x14, 0x00, 0x1f, 0xe0, 0x79, 0xe0, 0x38, 0xe0, 0x38, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x3c, 0x0f, 0xc7, 0x7f, 0x07, 0x1c, 0x07, 0x15, 0xff, 0x9c, 0x78, 0x79, 0xff, 0xf8, 0xff, 0xe0, 
	0x3c, 0x0f, 0xc7, 0x7f, 0x07, 0x1c, 0x07, 0x15, 0xff, 0x9c, 0x78, 0x79, 0xff, 0xf8, 0xff, 0xe0, 
	0x3c, 0x0f, 0xc7, 0x7f, 0x07, 0x1c, 0x07, 0x15, 0xff, 0x9c, 0x78, 0x79, 0xff, 0xf8, 0xff, 0xe0, 
	0x3c, 0x0f, 0xc7, 0x7f, 0x07, 0x1c, 0x07, 0x15, 0xff, 0x9c, 0x78, 0x79, 0xff, 0xf8, 0xff, 0xe0, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x3c, 0x03, 0xc7, 0x01, 0xc7, 0x1c, 0x07, 0x00, 0x07, 0x9c, 0x1e, 0x79, 0xe0, 0x38, 0xe0, 0x00, 
	0x3c, 0x03, 0xc7, 0x01, 0xc7, 0x1c, 0x07, 0x00, 0x07, 0x9c, 0x1e, 0x79, 0xe0, 0x38, 0xe0, 0x00, 
	0x3c, 0x03, 0xc7, 0x01, 0xc7, 0x1c, 0x07, 0x00, 0x07, 0x9c, 0x1e, 0x79, 0xe0, 0x38, 0xe0, 0x00, 
	0x3c, 0x03, 0xc7, 0x01, 0xc7, 0x1c, 0x07, 0x00, 0x07, 0x9c, 0x1e, 0x79, 0xe0, 0x38, 0xe0, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x0f, 0xff, 0x07, 0x01, 0xc7, 0x1f, 0x5c, 0x15, 0xff, 0x9c, 0x07, 0xf9, 0xe0, 0x38, 0xe0, 0x00, 
	0x0f, 0xff, 0x07, 0x01, 0xc7, 0x1f, 0x5c, 0x15, 0xff, 0x9c, 0x07, 0xf9, 0xe0, 0x38, 0xe0, 0x00, 
	0x0f, 0xff, 0x07, 0x01, 0xc7, 0x1f, 0x5c, 0x15, 0xff, 0x9c, 0x07, 0xf9, 0xe0, 0x38, 0xe0, 0x00, 
	0x0f, 0xff, 0x07, 0x01, 0xc7, 0x1f, 0x5c, 0x15, 0xff, 0x9c, 0x07, 0xf9, 0xe0, 0x38, 0xe0, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};




Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RST_PIN);
SoftwareSerial gpsSerial(RXPin, TXPin);
TinyGPSPlus gps;
GPS_UTM utm;

void showMessage(const char* msg, int textSize = 1) {
  display.clearDisplay();
  display.setTextSize(textSize);
  display.setTextColor(WHITE);
  display.setCursor(0, 0);
  display.println(msg);
  display.display();
}

void showBootLogo() {
  display.clearDisplay();
  display.drawBitmap(0, 0, gridSnapLogo, 128, 64, WHITE);
  display.display();
  delay(2000);  // Show for 2 seconds
}

void setup() {
  Serial.begin(9600);
  gpsSerial.begin(9600);

  display.begin(SSD1306_SWITCHCAPVCC, SCREEN_I2C_ADDR);
  showBootLogo();
  showMessage("Booting...");
  delay(1000);
  showMessage("Connecting to GPS...");
}

void displayUTM(float lat, float lon) {
  utm.UTM(lat, lon);  // Convert to UTM

  display.clearDisplay();

  // Line 1: UTM Zone + Band
  display.setTextSize(1);
  display.setCursor(0, 0);
  display.print("Zone: ");
  display.print(utm.zone());
  display.print(utm.band());

  // Line 2: Easting
  display.setTextSize(2);
  display.setCursor(0, 16);
  display.printf("%07d", utm.X());
  display.print(" E");

  // Line 3: Northing
  display.setCursor(0, 38);
  display.printf("%07d", utm.Y());
  display.print(" N");

  display.display();
}


void loop() {
  while (gpsSerial.available() > 0) {
    gps.encode(gpsSerial.read());

    if (gps.location.isUpdated()) {
      static bool firstFix = true;

      float lat = gps.location.lat();
      float lon = gps.location.lng();

      displayUTM(lat, lon);

      if (firstFix) {
        Serial.println("GPS Lock Acquired");
        firstFix = false;
      }
    }
  }
}
